
each component should be decoupled from each other


# state

features:
* moving pieces
* rotate board for players turn
* move pieces with commands

(requires knowledge about how pieces move)
* checking if a player is in check
* checking if a player is in checkmate


state tracked:
* pieces at what position
* taken pieces

state interface:
board_create()
board_destroy(board)

board_get_piece(board, rank, file)
board_set_piece(board, rank, file)
board_move_piece(board, fromRank, fromFile, toRank, toFile)
board_is_check(board)
board_is_checkmate(board)


# control


# viewer
should not do things 'automatically' e.g. if a player is in check should
not automatically display that information. Should be manually set.

viewer may require some state tracking? (hopefully not)

ideally view should not track state (though may make assumptions about
what has been drawn to the screen)

features:
* take commands from users
* display current player turn
* chess clock
* display pieces taken
* promotions (piece selection)

should display:
* pieces in check



view system can be thought of as a combination of subsystems, should be coded with this in mind (as different individual subsystems)


view interface:


# initialise subsystems
view_init()

# board
view_set_piece(rank, file, piece)
view_set_check(rank, file)

# side information
view_set_player(player)
view_set_taken(player, pieces)
view_set_clock(player, time)

# player input
view_get_promotion()
view_get_move(*rank, *file, *piece)
view_get_start()
view_print_illegal_move()


# thinking through model view controller architecture

how to handle asynchronous events? e.g:
* updating timer
* button press (of some kind)





